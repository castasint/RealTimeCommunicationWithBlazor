@page "/blog/{Id:int}"
@page "/blog/1"

@inject HttpClient HttpClient
@inject NavigationManager navigationManager

@using Microsoft.AspNetCore.SignalR.Client
<h3 class="mt-2 text text-primary"> BlogId : @Id</h3>

@{

    if (blog.BlogId == 0)
    {

        <RealTimeCommunicationWithBlazor.Client.Reusable_Components.Spinner />
    }
    else
    {
        <div class="card">
            <div class="card-header bg-myfavcolor1 text-white">

                @blog.Title     - <small class="text-muted">This blog was written @GetPrettyDate(blog.CreatedAt)</small>

            </div>
            <div class="card-body">


                @((MarkupString)blog.Content)
            </div>
</div>

        <section>
            <h2 class="mt-2 text text-primary">Comments: </h2>

            @foreach (var item in blog.Comments)
            {

            <div class="h-25">
                <div class="card border-secondary mt-1">
                    <div class="card-header">@item.Author - <small class="text-muted">This comment was added @GetPrettyDate(item.CreatedAt)</small></div>
                    <div class="card-body text-secondary">
                        @((MarkupString)item.Text)

                    </div>
                </div>

            </div>



            }
        </section>

    <UserComment BlogId="blog.BlogId" />
    }
}


@code {

    [Parameter]
    public int Id { get; set; }

    private RealTimeCommunicationWithBlazor.Shared.Blog blog = new RealTimeCommunicationWithBlazor.Shared.Blog();
    private Microsoft.AspNetCore.SignalR.Client.HubConnection hubConnection;

    protected async override Task OnInitializedAsync()
    {
        blog = new RealTimeCommunicationWithBlazor.Shared.Blog();

        hubConnection = new Microsoft.AspNetCore.SignalR.Client.HubConnectionBuilder()
             .WithUrl(navigationManager.ToAbsoluteUri("/bloghub"))
             .Build();
        hubConnection.On("NewCommentAddition", () =>
        {
            Console.WriteLine("New Comment Has Been Added...");
            RetreiveBlogDetails();


        });
        await hubConnection.StartAsync();

        await GetBlogDetails();
    }

    static string GetPrettyDate(DateTime d)
    {
        // 1.
        // Get time span elapsed since the date.
        TimeSpan s = DateTime.Now.Subtract(d);

        // 2.
        // Get total number of days elapsed.
        int dayDiff = (int)s.TotalDays;

        // 3.
        // Get total number of seconds elapsed.
        int secDiff = (int)s.TotalSeconds;

        // 4.
        // Don't allow out of range values.
        if (dayDiff < 0 || dayDiff >= 31)
        {
            return null;
        }

        // 5.
        // Handle same-day times.
        if (dayDiff == 0)
        {
            // A.
            // Less than one minute ago.
            if (secDiff < 60)
            {
                return "just now";
            }
            // B.
            // Less than 2 minutes ago.
            if (secDiff < 120)
            {
                return "1 minute ago";
            }
            // C.
            // Less than one hour ago.
            if (secDiff < 3600)
            {
                return string.Format("{0} minutes ago",
                    Math.Floor((double)secDiff / 60));
            }
            // D.
            // Less than 2 hours ago.
            if (secDiff < 7200)
            {
                return "1 hour ago";
            }
            // E.
            // Less than one day ago.
            if (secDiff < 86400)
            {
                return string.Format("{0} hours ago",
                    Math.Floor((double)secDiff / 3600));
            }
        }
        // 6.
        // Handle previous days.
        if (dayDiff == 1)
        {
            return "yesterday";
        }
        if (dayDiff < 7)
        {
            return string.Format("{0} days ago",
                dayDiff);
        }
        if (dayDiff < 31)
        {
            return string.Format("{0} weeks ago",
                Math.Ceiling((double)dayDiff / 7));
        }
        return null;
    }


    private void RetreiveBlogDetails()
    {

        Console.WriteLine("Get Blog Details");

        Task.Run(async () =>
        {

            await GetBlogDetails();
            StateHasChanged();

        });
    }


    private async Task GetBlogDetails()
    {

        blog = await HttpClient.GetFromJsonAsync<RealTimeCommunicationWithBlazor.Shared.Blog>("api/Blogs/" + Id.ToString());
    }

}
